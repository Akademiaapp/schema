generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                String              @id
  first_name        String
  last_name         String
  email             String              @unique
  created_at        DateTime?
  updated_at        DateTime?
  file_permission   file_permission[]
  school            school?             @relation(fields: [schoolId], references: [id], onDelete: SetNull)
  schoolId          String?
  user_group        user_group[]
  assignment        assignment[]
  assignment_answer assignment_answer[]
  type              UserType?
}

enum UserType {
  TESTER
  STUDENT
  TEACHER
  ADMIN
}

model user_group {
  user    user   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  group   group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  @@id([userId, groupId])
}

model document {
  id          String            @id @default(uuid())
  name        String
  data        Bytes?
  created_at  DateTime?
  updated_at  DateTime?
  isNote      Boolean           @default(false)
  permissions file_permission[]
}

model file_permission {
  id          String     @id @default(uuid())
  user_id     String     @db.Char(36)
  permission  Permission
  document_id String
  document    document   @relation(fields: [document_id], references: [id], onDelete: Cascade)
  user        user       @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model school {
  id      String  @id @default(uuid())
  name    String
  address String
  members user[]
  groups  group[]
}

model group {
  id         String       @id @default(uuid())
  name       String
  school     school       @relation(fields: [school_id], references: [id], onDelete: Cascade)
  school_id  String
  user_group user_group[]
}

model assignment {
  id                 String              @id @default(uuid())
  name               String
  teacher_id         String
  teacher            user                @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  due_date           DateTime
  created_at         DateTime?
  assignment_answers assignment_answer[]
  data               Bytes?
  updated_at         DateTime?
  isPublic           Boolean             @default(false)
  asigned_groups_ids String[]
}

model assignment_answer {
  id            String            @id @default(uuid())
  assignment_id String
  assignment    assignment        @relation(fields: [assignment_id], references: [id], onDelete: Cascade)
  student_id    String
  student       user              @relation(fields: [student_id], references: [id], onDelete: Cascade)
  status        assignment_status @default(NOT_STARTED)
  data          Bytes?
  feedback      String?
  grade         Int?
}

enum assignment_status {
  NOT_STARTED
  IN_PROGRESS
  SUBMITTED
  GRADED
}

enum Permission {
  READ
  WRITE
  OWNER
}
